openapi: 3.0.0
info:
  title: Sapientia API
  description: A RESTful API built with Node.js using Express, featuring JWT authentication and data persistence with MongoDB.
  version: 1.0.0
servers:
  - url: http://localhost:3001
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /:
    get:
      summary: Welcome Message
      description: Returns a welcome message from the API.
      tags:
        - General
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Welcome to Sapientia API"

  /health:
    get:
      summary: Health Check
      description: Checks the API status.
      tags:
        - General
      responses:
        '200':
          description: API is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"

  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                role:
                  type: string
                  enum: [user, admin]
                  default: user
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid input

  /auth/login:
    post:
      summary: Authenticate a user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
              required:
                - username
                - password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
        '401':
          description: Unauthorized

  /auth/logout:
    post:
      summary: Logout a user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully logged out
        '401':
          description: Unauthorized

  /profile:
    get:
      summary: Get user profile
      tags:
        - Profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile data
        '401':
          description: Unauthorized
    put:
      summary: Update user profile
      tags:
        - Profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Profile updated successfully
        '401':
          description: Unauthorized

  /users:
    get:
      summary: Get all users
      tags:
        - User Management
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of users
        '401':
          description: Unauthorized
    post:
      summary: Create a new user
      tags:
        - User Management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                role:
                  type: string
                  enum: [user, admin]
                  default: user
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid input


  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: The user ID
    put:
      summary: Update a user by ID
      tags:
        - User Management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: User updated successfully
        '401':
          description: Unauthorized
        '404':
          description: User not found
    delete:
      summary: Delete a user by ID
      tags:
        - User Management
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: User not found